apply plugin: 'application'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.bitdroid.githash:plugin:0.1.0'
    }
}

mainClassName = "org.jvalue.ods.main.OdsApplication"

run() {
    args 'server', 'ods-configuration.yml'
}

apply plugin: 'de.bitdroid.githash'

gitHashSettings {
    packageName = "org.jvalue.ods"
}

dependencies {
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.16'
    compile 'io.dropwizard:dropwizard-core:0.8.0-rc1'
    compile 'io.dropwizard:dropwizard-jersey:0.8.0'
    compile 'com.squareup.retrofit:retrofit:1.8.+'
    compile 'com.squareup.retrofit:converter-jackson:1.8.+'
    compile 'com.google.inject:guice:4.0-beta5'
    compile 'com.google.inject.extensions:guice-assistedinject:4.0-beta5'
    compile 'org.ektorp:org.ektorp:1.4.+'
	compile 'org.openstreetmap.osmosis:osmosis-core:0.43.+'
	compile 'org.openstreetmap.osmosis:osmosis-xml:0.43.+'
    compile 'org.openstreetmap.osmosis:osmosis-pbf:0.43.+'
	compile 'org.jsoup:jsoup:1.7.+'
	compile 'org.apache.commons:commons-lang3:3.3.+'
    compile 'org.apache.commons:commons-csv:1.1'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.4.4'
    compile 'com.hubspot.jackson:jackson-jaxrs-propertyfiltering:0.6.1'
    compile project(':models')
    compile project(':common')
    compile fileTree(dir: 'libs', include: '*.jar')

    testCompile 'org.jmockit:jmockit:1.13'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockftpserver:MockFtpServer:2.5'
    testCompile 'com.squareup.okhttp:okhttp:2.1.+'
    testCompile 'com.squareup.okhttp:okhttp-urlconnection:2.1.+'
    testCompile 'com.squareup.okhttp:mockwebserver:2.1.+'
    testCompile project(':client-retrofit')
}

// integration test
def testSrcDir = 'src/integrationtest/java'
def testResourceDir = 'src/integrationtest/resources'
sourceSets {
    integrationTest {
        java.srcDir file(testSrcDir)
        resources.srcDir file(testResourceDir)
        compileClasspath = sourceSets.main.output + configurations.testCompile + sourceSets.test.output
        runtimeClasspath = output + compileClasspath
    }
}
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
check.dependsOn integrationTest

idea {
    module {
        testSrcDir += new File(testSrcDir)
        sourceDirs += new File(project.projectDir.toString() + "/target/generated-sources/githash/")
    }
}

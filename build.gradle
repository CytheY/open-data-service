apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'war'
apply plugin: 'cargo'

repositories {
	maven {
  		url 'http://maven.restlet.org'
	}
	mavenCentral()
}


buildscript {
    repositories {
    	jcenter()
    }
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:1.4'
    }
}

cargo {
    containerId = 'tomcat7x'
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}


//task to create a jar
task uberjar(type: Jar) {
	from files(sourceSets.main.output.classesDir)
	from files(sourceSets.main.output.resourcesDir)
	from {configurations.compile.collect {zipTree(it)}}
}

mainClassName = "org.jvalue.ods.main.DataServerMain"

dependencies {
    cargo "org.codehaus.cargo:cargo-ant:1.4.5"
    
    compile 'com.fasterxml.jackson.core:jackson-databind:2.2.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.2.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.2.3'
	compile 'org.restlet.jee:org.restlet:2.1.6'
	compile 'org.restlet.jee:org.restlet.ext.jackson:2.1.6'
	compile 'org.restlet.jee:org.restlet.ext.servlet:2.1.6'
	compile 'org.ektorp:org.ektorp:1.4.1'
	compile 'org.openstreetmap.osmosis:osmosis-core:0.43.1'
	compile 'org.openstreetmap.osmosis:osmosis-xml:0.43.1'
	compile 'com.github.fge:json-schema-validator:2.1.7'
	compile 'org.slf4j:slf4j-api:1.7.5'
	compile 'org.slf4j:slf4j-log4j12:1.7.5'	
	testCompile 'junit:junit:4.11'
}

test {
    systemProperties 'property': 'value'
}


idea.project.ipr {
    withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
    }
}

task grabData(type: JavaExec, dependsOn: 'classes') {
    main = 'org.jvalue.ods.main.DataGrabberMain'
	classpath = sourceSets.main.runtimeClasspath
}

// integration test

sourceSets {
  integrationTest {
    compileClasspath = sourceSets.main.output + configurations.testRuntime
    runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
    java {
      srcDir 'src/integrationtest'
    }
  }
 }
  

task integrationTest(type: Test) {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

//build.dependsOn integrationTest
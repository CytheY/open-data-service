buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
    }
}

allprojects {
    group = 'org.jvalue.ods'
    version = '0.2.0'
}

task buildDockerImage {
    dependsOn ':server:copyDockerAssets'
    doLast {
        exec {
            workingDir 'docker/ods/'
            commandLine 'docker', 'build', '-t', 'osrg_ods/ods-snapshot:latest', '.'

        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: "com.github.johnrengelman.shadow"

    sourceCompatibility = 1.8

    ext {
        nexusPublicReleasesUrl = 'https://mojo-maven.cs.fau.de/repository/public-releases/'
    }

    javadoc {
        options.addStringOption('encoding', 'UTF-8')
    }

    // setup generated sources (if any)
    ext {
        mainSourcesDir = 'src/main/java'
        generatedSourcesDir = 'target/generated-sources/java'
    }
    sourceSets {
        main {
            java {
                srcDir mainSourcesDir
                srcDir generatedSourcesDir
            }
        }
    }

    // default maven repo
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url project.ext.nexusPublicReleasesUrl
        }
    }

    // gradle wrapper
    task wrapper(type: Wrapper) {
        gradleVersion = '4.2.1'
    }

    // show java compiler warnings
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }

    // one jar with all sources & dependencies
    shadowJar {
        baseName = project.name
        classifier = 'all'
        version = version
    }

    // integration test
    def testSrcDir = file('src/integrationtest/java')
    def testResourceDir = file('src/integrationtest/resources')
    sourceSets {
        integrationTest {
            java.srcDir testSrcDir
            resources.srcDir testResourceDir
            compileClasspath = sourceSets.main.output + configurations.testCompile + sourceSets.test.output
            runtimeClasspath = output + compileClasspath
        }
    }
    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }
    // check.dependsOn integrationTest

    // let intellij know about 'special' folders
    idea {
        module {
            testSourceDirs += testSrcDir
            sourceDirs += file(generatedSourcesDir)
        }
    }

    // publishing to nexus
    publishing {
    	if (!project.ext.has('nexusUsername')) {
            project.ext.nexusUsername = ''
        }
        if (!project.ext.has('nexusPassword')) {
            project.ext.nexusPassword = ''
        }
        publications {
            nexusJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
        repositories {
            maven {
                url project.ext.nexusPublicReleasesUrl
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }

        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    task copyDockerAssets(type: Copy) {
        dependsOn shadowJar
        from(libsDir) {
            include 'server*-all.jar'
        }
        into rootProject.file('docker/ods/assets/')
    }

}
